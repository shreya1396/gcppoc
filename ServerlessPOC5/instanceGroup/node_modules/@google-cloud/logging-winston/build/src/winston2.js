"use strict";
/*!
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const is = require("@sindresorhus/is");
const common_1 = require("./common");
// cant have type checking on winston because it may be version 2 or 3
const winston = require('winston');
class LoggingWinston extends winston.Transport {
    constructor(options) {
        options = options || {};
        const logName = options.logName || 'winston_log';
        super({
            level: options.level,
            name: logName,
        });
        this.common = new common_1.LoggingCommon(options);
    }
    log(levelName, msg, metadata, callback) {
        if (is.default.function_(metadata)) {
            callback = metadata;
            metadata = {};
        }
        this.common.log(levelName, msg, metadata, callback);
    }
}
LoggingWinston.LOGGING_TRACE_KEY = common_1.LOGGING_TRACE_KEY;
exports.LoggingWinston = LoggingWinston;
// We need to add StackdriverLogging to winston.transport which does not
// contain this type.
// tslint:disable-next-line:no-any
winston.transports.StackdriverLogging = LoggingWinston;
//# sourceMappingURL=winston2.js.map