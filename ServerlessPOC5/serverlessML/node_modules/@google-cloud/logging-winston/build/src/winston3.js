"use strict";
/*!
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const TransportStream = require("winston-transport");
const common_1 = require("./common");
class LoggingWinston extends TransportStream {
    constructor(options) {
        options = options || {};
        super({
            level: options.level,
        });
        this.common = new common_1.LoggingCommon(options);
    }
    log(_a, callback) {
        var { message, level, splat, stack } = _a, metadata = __rest(_a, ["message", "level", "splat", "stack"]);
        // If the whole message is an error we have to manually copy the stack into
        // metadata. Errors dont have enumerable properties so they don't
        // destructure.
        if (stack)
            metadata.stack = stack;
        this.common.log(level, message, metadata || {}, callback);
    }
}
LoggingWinston.LOGGING_TRACE_KEY = common_1.LOGGING_TRACE_KEY;
exports.LoggingWinston = LoggingWinston;
//# sourceMappingURL=winston3.js.map